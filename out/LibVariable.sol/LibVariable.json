{"abi":[{"type":"function","name":"assertExists","inputs":[{"name":"self","type":"tuple","internalType":"struct Variable","components":[{"name":"ty","type":"tuple","internalType":"struct Type","components":[{"name":"kind","type":"TypeKind","internalType":"enum TypeKind"},{"name":"isArray","type":"bool","internalType":"bool"}]},{"name":"data","type":"bytes","internalType":"bytes"}]}],"outputs":[],"stateMutability":"pure"},{"type":"error","name":"NotInitialized","inputs":[]},{"type":"error","name":"TypeMismatch","inputs":[{"name":"expected","type":"string","internalType":"string"},{"name":"actual","type":"string","internalType":"string"}]},{"type":"error","name":"UnsafeCast","inputs":[{"name":"message","type":"string","internalType":"string"}]}],"bytecode":{"object":"0x6103c761004d600b8282823980515f1a6073146041577f4e487b71000000000000000000000000000000000000000000000000000000005f525f60045260245ffd5b305f52607381538281f3fe7300000000000000000000000000000000000000003014608060405260043610610034575f3560e01c806315af8fee14610038575b5f5ffd5b610052600480360381019061004d919061031d565b610054565b005b5f600781111561006757610066610364565b5b815f01515f015160078111156100805761007f610364565b5b036100b7576040517f87138d5c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50565b5f604051905090565b5f5ffd5b5f5ffd5b5f5ffd5b5f601f19601f8301169050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b610115826100cf565b810181811067ffffffffffffffff82111715610134576101336100df565b5b80604052505050565b5f6101466100ba565b9050610152828261010c565b919050565b5f5ffd5b60088110610167575f5ffd5b50565b5f813590506101788161015b565b92915050565b5f8115159050919050565b6101928161017e565b811461019c575f5ffd5b50565b5f813590506101ad81610189565b92915050565b5f604082840312156101c8576101c76100cb565b5b6101d2604061013d565b90505f6101e18482850161016a565b5f8301525060206101f48482850161019f565b60208301525092915050565b5f5ffd5b5f5ffd5b5f67ffffffffffffffff821115610222576102216100df565b5b61022b826100cf565b9050602081019050919050565b828183375f83830152505050565b5f61025861025384610208565b61013d565b90508281526020810184848401111561027457610273610204565b5b61027f848285610238565b509392505050565b5f82601f83011261029b5761029a610200565b5b81356102ab848260208601610246565b91505092915050565b5f606082840312156102c9576102c86100cb565b5b6102d3604061013d565b90505f6102e2848285016101b3565b5f83015250604082013567ffffffffffffffff81111561030557610304610157565b5b61031184828501610287565b60208301525092915050565b5f60208284031215610332576103316100c3565b5b5f82013567ffffffffffffffff81111561034f5761034e6100c7565b5b61035b848285016102b4565b91505092915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602160045260245ffdfea26469706673582212200e1821a67d5663219e4a22e856c2b9e26a9d53da38bd24228052ec150445394f64736f6c634300081e0033","sourceMap":"1690:16281:2:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","linkReferences":{}},"deployedBytecode":{"object":"0x7300000000000000000000000000000000000000003014608060405260043610610034575f3560e01c806315af8fee14610038575b5f5ffd5b610052600480360381019061004d919061031d565b610054565b005b5f600781111561006757610066610364565b5b815f01515f015160078111156100805761007f610364565b5b036100b7576040517f87138d5c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50565b5f604051905090565b5f5ffd5b5f5ffd5b5f5ffd5b5f601f19601f8301169050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b610115826100cf565b810181811067ffffffffffffffff82111715610134576101336100df565b5b80604052505050565b5f6101466100ba565b9050610152828261010c565b919050565b5f5ffd5b60088110610167575f5ffd5b50565b5f813590506101788161015b565b92915050565b5f8115159050919050565b6101928161017e565b811461019c575f5ffd5b50565b5f813590506101ad81610189565b92915050565b5f604082840312156101c8576101c76100cb565b5b6101d2604061013d565b90505f6101e18482850161016a565b5f8301525060206101f48482850161019f565b60208301525092915050565b5f5ffd5b5f5ffd5b5f67ffffffffffffffff821115610222576102216100df565b5b61022b826100cf565b9050602081019050919050565b828183375f83830152505050565b5f61025861025384610208565b61013d565b90508281526020810184848401111561027457610273610204565b5b61027f848285610238565b509392505050565b5f82601f83011261029b5761029a610200565b5b81356102ab848260208601610246565b91505092915050565b5f606082840312156102c9576102c86100cb565b5b6102d3604061013d565b90505f6102e2848285016101b3565b5f83015250604082013567ffffffffffffffff81111561030557610304610157565b5b61031184828501610287565b60208301525092915050565b5f60208284031215610332576103316100c3565b5b5f82013567ffffffffffffffff81111561034f5761034e6100c7565b5b61035b848285016102b4565b91505092915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602160045260245ffdfea26469706673582212200e1821a67d5663219e4a22e856c2b9e26a9d53da38bd24228052ec150445394f64736f6c634300081e0033","sourceMap":"1690:16281:2:-:0;;;;;;;;;;;;;;;;;;;;;;;;4342:155;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;4428:13;4412:29;;;;;;;;:::i;:::-;;:4;:7;;;:12;;;:29;;;;;;;;:::i;:::-;;;4408:83;;4464:16;;;;;;;;;;;;;;4408:83;4342:155;:::o;7:75:54:-;40:6;73:2;67:9;57:19;;7:75;:::o;88:117::-;197:1;194;187:12;211:117;320:1;317;310:12;334:117;443:1;440;433:12;457:102;498:6;549:2;545:7;540:2;533:5;529:14;525:28;515:38;;457:102;;;:::o;565:180::-;613:77;610:1;603:88;710:4;707:1;700:15;734:4;731:1;724:15;751:281;834:27;856:4;834:27;:::i;:::-;826:6;822:40;964:6;952:10;949:22;928:18;916:10;913:34;910:62;907:88;;;975:18;;:::i;:::-;907:88;1015:10;1011:2;1004:22;794:238;751:281;;:::o;1038:129::-;1072:6;1099:20;;:::i;:::-;1089:30;;1128:33;1156:4;1148:6;1128:33;:::i;:::-;1038:129;;;:::o;1173:117::-;1282:1;1279;1272:12;1296:111;1381:1;1374:5;1371:12;1361:40;;1397:1;1394;1387:12;1361:40;1296:111;:::o;1413:163::-;1471:5;1509:6;1496:20;1487:29;;1525:45;1564:5;1525:45;:::i;:::-;1413:163;;;;:::o;1582:90::-;1616:7;1659:5;1652:13;1645:21;1634:32;;1582:90;;;:::o;1678:116::-;1748:21;1763:5;1748:21;:::i;:::-;1741:5;1738:32;1728:60;;1784:1;1781;1774:12;1728:60;1678:116;:::o;1800:133::-;1843:5;1881:6;1868:20;1859:29;;1897:30;1921:5;1897:30;:::i;:::-;1800:133;;;;:::o;1958:582::-;2028:5;2072:4;2060:9;2055:3;2051:19;2047:30;2044:117;;;2080:79;;:::i;:::-;2044:117;2179:21;2195:4;2179:21;:::i;:::-;2170:30;;2259:1;2299:61;2356:3;2347:6;2336:9;2332:22;2299:61;:::i;:::-;2292:4;2285:5;2281:16;2274:87;2210:162;2434:2;2475:46;2517:3;2508:6;2497:9;2493:22;2475:46;:::i;:::-;2468:4;2461:5;2457:16;2450:72;2382:151;1958:582;;;;:::o;2546:117::-;2655:1;2652;2645:12;2669:117;2778:1;2775;2768:12;2792:307;2853:4;2943:18;2935:6;2932:30;2929:56;;;2965:18;;:::i;:::-;2929:56;3003:29;3025:6;3003:29;:::i;:::-;2995:37;;3087:4;3081;3077:15;3069:23;;2792:307;;;:::o;3105:148::-;3203:6;3198:3;3193;3180:30;3244:1;3235:6;3230:3;3226:16;3219:27;3105:148;;;:::o;3259:423::-;3336:5;3361:65;3377:48;3418:6;3377:48;:::i;:::-;3361:65;:::i;:::-;3352:74;;3449:6;3442:5;3435:21;3487:4;3480:5;3476:16;3525:3;3516:6;3511:3;3507:16;3504:25;3501:112;;;3532:79;;:::i;:::-;3501:112;3622:54;3669:6;3664:3;3659;3622:54;:::i;:::-;3342:340;3259:423;;;;;:::o;3701:338::-;3756:5;3805:3;3798:4;3790:6;3786:17;3782:27;3772:122;;3813:79;;:::i;:::-;3772:122;3930:6;3917:20;3955:78;4029:3;4021:6;4014:4;4006:6;4002:17;3955:78;:::i;:::-;3946:87;;3762:277;3701:338;;;;:::o;4068:762::-;4142:5;4186:4;4174:9;4169:3;4165:19;4161:30;4158:117;;;4194:79;;:::i;:::-;4158:117;4293:21;4309:4;4293:21;:::i;:::-;4284:30;;4371:1;4411:70;4477:3;4468:6;4457:9;4453:22;4411:70;:::i;:::-;4404:4;4397:5;4393:16;4386:96;4324:169;4580:2;4569:9;4565:18;4552:32;4611:18;4603:6;4600:30;4597:117;;;4633:79;;:::i;:::-;4597:117;4753:58;4807:3;4798:6;4787:9;4783:22;4753:58;:::i;:::-;4746:4;4739:5;4735:16;4728:84;4503:320;4068:762;;;;:::o;4836:539::-;4920:6;4969:2;4957:9;4948:7;4944:23;4940:32;4937:119;;;4975:79;;:::i;:::-;4937:119;5123:1;5112:9;5108:17;5095:31;5153:18;5145:6;5142:30;5139:117;;;5175:79;;:::i;:::-;5139:117;5280:78;5350:7;5341:6;5330:9;5326:22;5280:78;:::i;:::-;5270:88;;5066:302;4836:539;;;;:::o;5381:180::-;5429:77;5426:1;5419:88;5526:4;5523:1;5516:15;5550:4;5547:1;5540:15","linkReferences":{}},"methodIdentifiers":{"assertExists(Variable)":"15af8fee"},"rawMetadata":"{\"compiler\":{\"version\":\"0.8.30+commit.73712a01\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"NotInitialized\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"expected\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"actual\",\"type\":\"string\"}],\"name\":\"TypeMismatch\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"message\",\"type\":\"string\"}],\"name\":\"UnsafeCast\",\"type\":\"error\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"enum TypeKind\",\"name\":\"kind\",\"type\":\"TypeKind\"},{\"internalType\":\"bool\",\"name\":\"isArray\",\"type\":\"bool\"}],\"internalType\":\"struct Type\",\"name\":\"ty\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct Variable\",\"name\":\"self\",\"type\":\"tuple\"}],\"name\":\"assertExists\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Ensures that when a `Variable` is cast to a concrete Solidity type, the operation is safe and the         underlying type matches what is expected.         Provides functions to check types, convert them to strings, and coerce `Variable` instances into         both single values and arrays of various types.         Usage example:         ```solidity         import {LibVariable} from \\\"./LibVariable.sol\\\";         contract MyContract {             using LibVariable for Variable;             StdConfig config;   // Assume 'config' is an instance of `StdConfig` and has already been loaded.             function readValues() public {                 // Retrieve a 'uint256' value from the config.                 uint256 myNumber = config.get(\\\"important_number\\\").toUint256();                 // Would revert with `TypeMismatch` as 'important_number' isn't a `uint256` in the config file.                 // string memory notANumber = config.get(\\\"important_number\\\").toString();                 // Retrieve a address array from the config.                 string[] memory admins = config.get(\\\"whitelisted_admins\\\").toAddressArray();          }      }      ```\",\"kind\":\"dev\",\"methods\":{\"assertExists(Variable)\":{\"details\":\"Checks if a `Variable` has been initialized, reverting if not.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Library for type-safe coercion of the `Variable` struct to concrete types.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/lib/forge-std/src/LibVariable.sol\":\"LibVariable\"},\"evmVersion\":\"prague\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/lib/forge-std/src/LibVariable.sol\":{\"keccak256\":\"0xdadd1a31b1a0ecd51ada507e1fd6218ee7b7f2c615adcd0765b5e9b1b0d5946e\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://dacf7734f77758592c7863a62737fbed6180e62ee50191b87e21e99c04c324af\",\"dweb:/ipfs/QmSxdLKhaXUj7krJ8utNqBj8TJRkHXnbXMmNYYn1fgoBzz\"]}},\"version\":1}","metadata":{"compiler":{"version":"0.8.30+commit.73712a01"},"language":"Solidity","output":{"abi":[{"inputs":[],"type":"error","name":"NotInitialized"},{"inputs":[{"internalType":"string","name":"expected","type":"string"},{"internalType":"string","name":"actual","type":"string"}],"type":"error","name":"TypeMismatch"},{"inputs":[{"internalType":"string","name":"message","type":"string"}],"type":"error","name":"UnsafeCast"},{"inputs":[{"internalType":"struct Variable","name":"self","type":"tuple","components":[{"internalType":"struct Type","name":"ty","type":"tuple","components":[{"internalType":"enum TypeKind","name":"kind","type":"TypeKind"},{"internalType":"bool","name":"isArray","type":"bool"}]},{"internalType":"bytes","name":"data","type":"bytes"}]}],"stateMutability":"pure","type":"function","name":"assertExists"}],"devdoc":{"kind":"dev","methods":{"assertExists(Variable)":{"details":"Checks if a `Variable` has been initialized, reverting if not."}},"version":1},"userdoc":{"kind":"user","methods":{},"version":1}},"settings":{"remappings":[],"optimizer":{"enabled":false,"runs":200},"metadata":{"bytecodeHash":"ipfs"},"compilationTarget":{"contracts/lib/forge-std/src/LibVariable.sol":"LibVariable"},"evmVersion":"prague","libraries":{}},"sources":{"contracts/lib/forge-std/src/LibVariable.sol":{"keccak256":"0xdadd1a31b1a0ecd51ada507e1fd6218ee7b7f2c615adcd0765b5e9b1b0d5946e","urls":["bzz-raw://dacf7734f77758592c7863a62737fbed6180e62ee50191b87e21e99c04c324af","dweb:/ipfs/QmSxdLKhaXUj7krJ8utNqBj8TJRkHXnbXMmNYYn1fgoBzz"],"license":"MIT"}},"version":1},"id":2}